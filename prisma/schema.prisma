generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model TutorRequest {
  id        String  @id @default(cuid())
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String

  student        String
  studentEmail   String
  subject        String
  genderPref     String?
  additionalInfo String?

  isActive Boolean @default(true)

  status String @default("PENDING")

  tutor   Tutor?  @relation("AssignedTutor", fields: [tutorId], references: [id])
  tutorId String?

  matchedTutor   Tutor?  @relation("MatchedTutor", fields: [matchedTutorId], references: [id])
  matchedTutorId String?

  studentToken String? 
  tutorToken String? 
}

model Tutor {
  id       String   @id @default(cuid())
  name     String
  email    String   @unique
  subjects String[]

  isActive Boolean @default(true)

  assignedRequests TutorRequest[] @relation("AssignedTutor")
  matchedRequests  TutorRequest[] @relation("MatchedTutor")
}

model Teacher {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  tutorRequests TutorRequest[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  teacher       Teacher?
}
